/*
 * This build file was auto generated by running the Gradle 'buildSetup' task
 * by 'stefan.marx' at '09.10.13 14:44' with Gradle 1.7
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/1.7/userguide/tutorial_java_projects.html
 */


apply plugin: 'java'
apply from: 'agentTasks.gradle'

version='1.0'


repositories {
    maven {
        url "https://raw.github.com/Appdynamics/artifact-library/master/repo/"
    }
    mavenCentral();

//    maven {
//        url "file:///vlab/maven/private-artifact-library/repo/"
//    }
}

compileJava {
    sourceCompatibility = 1.6
    targetCompatibility = 1.6
 //   options.bootClasspath = "/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/classes.jar"
}

configurations {
    agentRuntime
    agentBinary
}


dependencies {
    compile ("log4j:log4j:1.2.17")
    compile "com.appdynamics:machineagent:4.0.0"

//    DEFINE teh dependency for the sandbox environment
//    agentBinary "com.appdynamics:MachineAgent:4.0.0@zip"


    compile 'org.snmp4j:snmp4j:1.10.1'
    compile 'org.yaml:snakeyaml:1.15'

    //  compile "org.codehaus.jackson:jackson-mapper-asl:1.8.5"

    // need to add all Agent Libraries Due to a Bug in Idea this needs to be a copy of the above
    // agentRuntime project(":agentApi")
    agentRuntime 'org.snmp4j:snmp4j:1.10.1'
    agentRuntime 'org.yaml:snakeyaml:1.15'
}


generateMonitorXML {
    agentDescription = "SnmpTrapReceiver"
    continuous = true;
    agentName="snmpAgent"
    mainClass = 'de.appdynamics.extensions.snmpMonitor.SnmpAgent'     //TODO enter the main class
    classpath = "snmpAgent.jar"    // be carefull this is a hardcoded Name !!!
}


jar {
      archiveName="snmpAgent.jar"
}


task packageAgent (type: Zip) {
    archiveName = AgentPackageName+".zip"
    into(agentName+"/lib") {
        from(project.configurations.agentRuntime)
    }
    into(agentName) {
        from jar
        from generateMonitorXML

    }


}

tasks.assemble.dependsOn(packageAgent)



/*

task installSandbox() {
    doLast {
        copy {
            configurations.agentBinary.filter { it.toString().endsWith(".zip") }.each {
                from zipTree(it)
            }
            into 'build/sandbox/agent'
        }
        copy {
            files("build/distributions/"+AgentPackageName+".zip").each{
                from zipTree(it)
            }
            into 'build/sandbox/agent/monitors'
        }
    }
}

tasks.installSandbox.dependsOn(packageAgent)

*/

tasks.packageAgent.dependsOn(jar)
